<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		   http://www.springframework.org/schema/mvc
		   http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<import resource="applicationContext-webflow.xml"/>
    <import resource="applicationContext-scheduler.xml"/>
    <import resource="applicationContext-service.xml"/>    
    
    
     <!-- Configures Handler Interceptors
	 http://www.captaindebug.com/2011/09/using-spring-interceptors-in-your-mvc.html
	  --> 
	<mvc:interceptors>  
	 <!-- This bit of XML will intercept all URLs - which is what you want in a web app -->
	 
	 
	 <!-- This bit of XML will apply certain URLs to certain interceptors -->
	  
	 <mvc:interceptor>
	  <mvc:mapping path="/listMyFiends"/>	  
	  <mvc:mapping path="/get"/>
	  <bean class="com.yourpackagename.framework.web.webflow.WebflowHandlerInterceptor" />
	 </mvc:interceptor>
	 
	</mvc:interceptors>
	
     <!--
     If you do not want to configure the message converters yourself, you can use either @EnableWebMvc or <mvc:annotation-driven />, add Jackson to the classpath and Spring will give you both JSON, XML (and a few other converters) by default. Additionally, you will get some other commonly used features for conversion, formatting and validation. 
     -->
  	<mvc:annotation-driven>
		 <mvc:argument-resolvers>
		   <bean class="com.yourpackagename.framework.web.webflow.WebflowArgumentResolver" p:flowExecutor-ref="flowExecutor" />
		    <bean class="com.yourpackagename.framework.web.datatable.TableParamArgumentResolver" />		   
		 </mvc:argument-resolvers>
		 <!--  -->
		 <mvc:message-converters>
		 	<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
   			<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />		 
		 </mvc:message-converters> 
	</mvc:annotation-driven>
    
    <!-- 
    <tx:annotation-driven/>
     -->
     
    <mvc:default-servlet-handler />

    <!-- Handles HTTP GET requests for /res/** by efficiently serving up static resources in the ${webappRoot}/res directory -->
   	<mvc:resources mapping="/res/**" location="/res/" />

    <bean id="tilesConfigurer"
          class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>classpath:tiles/templates.web.xml</value>
            </list>
        </property>
    </bean>
    
	<!-- 
    <bean id="tilesViewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean>
     -->
    

    <!-- Add controller package to be scanned for this path -->
    <context:component-scan base-package="com.yourpackagename.yourwebproject.webapp.controller"/>
    <context:component-scan base-package="com.yourpackagename.yourwebproject.api.controller"/>
    
    	<!-- Application Message Bundle -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="/WEB-INF/messages" />
        <property name="cacheSeconds" value="3000" />
    </bean>
    
    
</beans>