<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
   xmlns="http://www.springframework.org/schema/security" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"  
   xmlns:context="http://www.springframework.org/schema/context" 
   xsi:schemaLocation="http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	    http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd">
        
    <beans:import resource="applicationContext-service.xml"/>

 	<context:component-scan base-package="com.yourpackagename.commons.security"/>
    
     <!-- Stateless RESTful service using Basic authentication  -->
	  <http pattern="/api/**" create-session="stateless"  use-expressions="true" >
	    <intercept-url pattern='/**' access='isAuthenticated()' />
	    <http-basic />
	  </http>
     
    
   <http  auto-config="false"  use-expressions="true"  entry-point-ref="restAuthenticationEntryPoint">
   	  <intercept-url pattern="/home" access="permitAll"/>
   	  <intercept-url pattern="/userRegistration" access="permitAll"/>
   	  <intercept-url pattern="/loginUser" access="permitAll"/>	
   	  <intercept-url pattern="/registerUser" access="permitAll"/>
   	  <!-- 
       	<intercept-url pattern="/backend/**" access="isAuthenticated()" />
  		<intercept-url pattern="/resources/**" access="permitAll" />
  		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
  		<intercept-url pattern="/**" access="permitAll" />
  		<intercept-url pattern="/secure/*" access="isAuthenticated()"/>
  	    <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
  	    <intercept-url pattern="/secure/*" access="isAuthenticated()"/>
  	     <intercept-url pattern="/api/**" access="isAuthenticated()"/>
      -->
      
      <intercept-url pattern="/choose" access="isAuthenticated()"/>      
      <intercept-url pattern="/secure/*" access="isAuthenticated()"/>
      
      
      <custom-filter ref="myFilter" position="FORM_LOGIN_FILTER"/>
      <logout logout-success-url="/" />
   </http>
    
  <!-- 
  http://forum.springsource.org/showthread.php?88927-Spring-login-without-being-redirected
  org.springframework.security.ui.webapp.AuthenticationProcessingFilter
  http://static.springsource.org/spring-security/site/docs/3.1.x/reference/springsecurity.html
  
   <beans:bean id="myFilter" class="com.yourpackagename.yourwebproject.filter.CustomUsernamePasswordAuthenticationFilter">
      <beans:property name="authenticationManager" ref="authenticationManager"/>
      <beans:property name="authenticationSuccessHandler" ref="mySuccessHandler"/>
   </beans:bean>
   
   -->
  
    <beans:bean id="myFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
       <beans:property name="filterProcessesUrl" value="/j_spring_security_check"/>
       <beans:property name="authenticationSuccessHandler" ref="mySuccessHandler" />
       <beans:property name="authenticationFailureHandler" ref="myFailureHandler" />
   </beans:bean>
    
   <beans:bean id="mySuccessHandler" class="com.yourpackagename.commons.security.MyAuthenticationSuccessHandler"/>
    <beans:bean id="myFailureHandler" class="com.yourpackagename.commons.security.MyAuthenticationFailureHandler"/>
    
   <authentication-manager alias="authenticationManager">
      <authentication-provider user-service-ref="userService">
           <password-encoder ref="encoder"/>
         </authentication-provider>
   </authentication-manager>
   
   <!--
   	http://rtimothy.tumblr.com/post/26527448708/spring-3-1-security-and-salting-passwords 
    -->
   <beans:bean id="encoder" 
    				class="org.springframework.security.crypto.password.StandardPasswordEncoder">
	</beans:bean>
	 
    <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
    <beans:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

   <!-- An in-memory list of users. No need to access an external database layer.
      See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
  <!-- john's password: admin
    jane's password: user
    mike's password: visitor  -->
  <user-service id="userDetailsService">
     <user name="admin" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_ADMIN, ROLE_USER, ROLE_VISITOR" />
     <user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER, ROLE_VISITOR" />
     <user name="mike" password="127870930d65c57ee65fcc47f2170d38" authorities="ROLE_VISITOR" />
   </user-service>
      
      
</beans:beans>  