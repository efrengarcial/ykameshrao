<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc" 
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:webflow="http://www.springframework.org/schema/webflow-config"
       xsi:schemaLocation="
       	   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.3.xsd">
	
	<!-- Executes flows: the entry point into the Spring Web Flow system -->
	<webflow:flow-executor id="flowExecutor" flow-registry="flowRegistry">
		<webflow:flow-execution-listeners>
			<webflow:listener ref="securityFlowExecutionListener" />
		</webflow:flow-execution-listeners>
	</webflow:flow-executor>
	
	<!-- The registry of executable flow definitions 
	http://forum.springsource.org/showthread.php?74884-Question-on-flow-location-pattern -->
	<webflow:flow-registry id="flowRegistry" flow-builder-services="flowBuilderServices" >
		<webflow:flow-location-pattern value="/WEB-INF/flows/*.xml" />
	</webflow:flow-registry>

	<!-- Plugs in a custom creator for Web Flow views -->
	<webflow:flow-builder-services id="flowBuilderServices" view-factory-creator="mvcViewFactoryCreator" 
		development="true" validator="validator" />

	<!-- Configures Web Flow to use Tiles to create views for rendering; Tiles allows for applying consistent layouts to your views -->
	<bean id="mvcViewFactoryCreator" class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator"> 
		<property name="viewResolvers" ref="viewResolver"/>
		<property name="useSpringBeanBinding" value="true" />
	</bean>
	
	<!-- Installs a listener to apply Spring Security authorities --> 
	<bean id="securityFlowExecutionListener" class="org.springframework.webflow.security.SecurityFlowExecutionListener" />

	<!-- Bootstraps JSR-303 validation and exposes it through Spring's Validator interface --> 
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
	
	<!--
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="interceptors">
            <list>
                <ref local="flowHandlerInterceptor" />
            </list>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="customArgumentResolvers">
            <list>
                <bean class="com.yourpackagename.framework.webflow.WebflowArgumentResolver" p:flowExecutor-ref="flowExecutor" />
            </list>
        </property>
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
  

    <bean id="flowHandlerInterceptor" class="com.yourpackagename.framework.webflow.WebflowHandlerInterceptor" />
     --> 
   
    
    	<!-- Maps request paths to flows in the flowRegistry; e.g. a path of /hotels/booking looks for a flow with id "hotels/booking". -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="order" value="1"/>
		<property name="flowRegistry" ref="flowRegistry" />
	</bean>
	
	<!-- Dispatches requests mapped to flows to FlowHandler implementations  -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor"/>
	</bean>
	
	 <!--
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter" p:flowExecutor-ref="flowExecutor" />
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping" p:flowRegistry-ref="flowRegistry" p:order="1" />
    -->
	
	 <!-- 	
     	Letâ€™s begin by replacing the standard UrlBasedViewResolver with the AJAX decorated org 
		.springframework.js.ajax.AjaxUrlBasedViewResolver in the WebMvcContextConfiguration class (see 
		Listing 12-16). The org.springframework.web.servlet.view.tiles2.TilesView is also replaced with the 
		org.springframework.webflow.mvc.view.FlowAjaxTilesView. 
		Listing 12-16. Configuring the AjaxUrlBasedViewResolver for Ajax support in 
		WebMvcContextConfiguration 
		@Bean 
		public ViewResolver tilesViewResolver() { 
		    UrlBasedViewResolver urlBasedViewResolver = new AjaxUrlBasedViewResolver(); 
		    urlBasedViewResolver.setOrder(1); 
		    urlBasedViewResolver.setViewClass(FlowAjaxTilesView.class); 
		    return urlBasedViewResolver; 
		} 
		In the preceding example, we simply replace the existing view resolver with the Ajax decorated one. 
		When a non-AJAX view is detected, the behavior is the same as for a normal URL-based view resolver. 
		      -->
	<!-- Resolves logical view names returned by Controllers to Tiles; a view name to resolve is treated as the name of a tiles definition 
	<bean id="viewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.webflow.mvc.view.FlowAjaxTilesView"/>
	</bean>
	-->
	
	<bean id="viewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean>
	 
	<!-- 
	 <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/views/web/" />
        <property name="suffix" value=".jsp" />
    </bean>
 -->
		

	
</beans>